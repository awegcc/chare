{
  "_args": [
    [
      {
        "raw": "streaming-cache",
        "scope": null,
        "escapedName": "streaming-cache",
        "name": "streaming-cache",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/sgcc/share/blockCache"
    ]
  ],
  "_cnpm_publish_time": 1538306085895,
  "_from": "streaming-cache",
  "_hasShrinkwrap": false,
  "_id": "streaming-cache@0.5.5",
  "_location": "/streaming-cache",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/streaming-cache_0.5.5_1538306085643_0.19506757276801556"
  },
  "_npmUser": {
    "name": "laurent.zuijdwijk",
    "email": "laurent.zuijdwijk@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "streaming-cache",
    "scope": null,
    "escapedName": "streaming-cache",
    "name": "streaming-cache",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "http://registry.npm.taobao.org/streaming-cache/download/streaming-cache-0.5.5.tgz",
  "_shasum": "001adf11bd5249a4a010ac6cf298630d23e7f198",
  "_shrinkwrap": null,
  "_spec": "streaming-cache",
  "_where": "/Users/sgcc/share/blockCache",
  "author": {
    "name": "Laurent Zuijdwijk"
  },
  "bugs": {
    "url": "https://github.com/LaurentZuijdwijk/streaming-cache/issues"
  },
  "dependencies": {
    "linkedlist": "^1.0.1",
    "lodash.assign": "^4.0.1",
    "lru-cache": "^2.7.0"
  },
  "description": "Cache and replay NodeJS streams",
  "devDependencies": {
    "istanbul": "^0.3.22",
    "jasmine-node": "^1.14.5",
    "mocha": "^5.2.0",
    "supertest": "^3.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "001adf11bd5249a4a010ac6cf298630d23e7f198",
    "size": 2014741,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/streaming-cache/download/streaming-cache-0.5.5.tgz"
  },
  "gitHead": "ffbaad1a397c28f1ab29c7f4834858c05b40f9b1",
  "homepage": "https://github.com/LaurentZuijdwijk/streaming-cache#readme",
  "keywords": [
    "cache",
    "streams",
    "queue"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "name": "laurent.zuijdwijk",
      "email": "laurent.zuijdwijk@gmail.com"
    }
  ],
  "name": "streaming-cache",
  "optionalDependencies": {},
  "publish_time": 1538306085895,
  "readme": "[![Circle CI](https://circleci.com/gh/LaurentZuijdwijk/streaming-cache/tree/master.svg?style=svg)](https://circleci.com/gh/LaurentZuijdwijk/streaming-cache/tree/master)\n\nStreaming Cache\n===============\n\nSpeed up your services.\n\nCache, queue and distribute streams immediately. Streams can be replayed immediately, even if the source is not finished.\n\nUses a fixed size LRU-cache in the background.\n\nUsefull for caching (slow) streaming connections, such as S3 requests or complex database queries.  \n\nIf there are for example 3 requests for a certain file in close succession, then we can pipe the result for the first request into the cache. The 2 other requests will receive a stream which will start even before the first one is finished.\n\nPerformance\n-----------\n\nServing from this cache is extremely fast. On my local machine I get 2.5GB per second for a single process on localhost using AB. (4th gen i7).\n\nInstallation\n------------\n\n```npm i streaming-cache --save```\n\nQuick example\n-------------\n\n```javascript\n\nvar Cache = require('../index.js');\nvar cache = new Cache();\nvar fs = require('fs');\n\nvar inputStream = fs.createReadStream('readme.md');\nvar outputStream = fs.createWriteStream('test2.txt');\n\ninputStream.pipe(cache.set('myKey'));\n\nsetTimeout(function(){\n  outputStream.write('written from cache\\n\\n');\n  cache.get('myKey').pipe(outputStream);\n }, 200);\n\n```\n\nOptions\n-------\n\nFor a list of options see: https://www.npmjs.com/package/lru-cache\n\n\nAPI\n---\n\n##### set(key)\nreturns a Duplex stream\n```\nfileStream.pipe(cache.set('key')).pipe(res);\n```\n\n\n##### get(key) => ReadableStream\n\n```javascript\nvar cached = cache.get('key');\nif(cached){\n\tcached.pipe(res);\n}\n```\n\n\n#### setData(key, data) => WriteableStream\nA set data synchronously to stream at a later moment\n\n#### getData\nGet data with a callback.\n\n```javascript\ncache.getData('key', function(err, data){\n\tif(err){\n\t  //handle error\n\t}\n\t// do something with data\n}));\n```\n#### setMetadata(key, data)\nSet metadata for a stream to be used later.\n\n#### getMetadata(key, data)\nGet metadata\n\n#### exists(key)\nreturns true or false if a key exists.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/LaurentZuijdwijk/streaming-cache.git"
  },
  "scripts": {
    "test": "istanbul cover ./node_modules/jasmine-node/bin/jasmine-node ./spec --captureExceptions --verbose && mocha test/integration/*.spec.js"
  },
  "version": "0.5.5"
}
